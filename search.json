[
  {
    "objectID": "sandbox.html",
    "href": "sandbox.html",
    "title": "Sandbox R code",
    "section": "",
    "text": "This Quarto website was rendered on GitHub 2024-03-06 07:00:26 at UTC time.\nThe following code is focused on connecting R on GitHub to external data sources.\nI test R code to:\n\nRead a public shared googlesheet from Google Drive ‚úÖ\nRead a public shared .xlsx file from Google Drive\nDownload a public shared .rds file from Google Drive\nRead data from an external API, Star Wars ‚úÖ\nRead data from an external API, Weather forecast\nRead and download files from private Google Drive, with authentication\n\n\nRead a public shared googlesheet from Google Drive\n\nlibrary(googlesheets4)\nlibrary(gt)\n\ngooglesheets4::gs4_deauth()     # Without auth\n\nspreadsheet_url &lt;- \"https://docs.google.com/spreadsheets/d/1dnzTx2TIxk-QpoWNz08Jr_e4F2rZ4mDBgphzq9lwdYM/edit?usp=drive_link\"\ndatatable &lt;- googlesheets4::read_sheet(spreadsheet_url, range = \"Ark1!A1:D5\")\n\n# datatable |&gt; write_rds(\"datatable.rds\")  # NOT TESTED write and save a file (.rds) to my GitHub repository\ndatatable |&gt; gt()                        # print my datatable\n\n\n\n\n\n\n\n\nDato\nTid\nNavn\nBem√¶rkning\n\n\n\n\n2024-01-27\nkl. 8.00-10.00\nAlbert\nbla\n\n\n2024-01-28\nKl. 9.00\nCamus\nhallo\n\n\n2024-01-27\nKl. 9.00\nHansen\nHejsa\n\n\n2024-01-27\nKl. 10.00\nPeter\nHej\n\n\n\n\n\n\n\n\n\nRead a public shared .xlsx file from Google Drive\n\nlibrary(googledrive)\n\n\nAttaching package: 'googledrive'\n\n\nThe following objects are masked from 'package:googlesheets4':\n\n    request_generate, request_make\n\nlibrary(readxl)\nlibrary(gt)\n\ngoogledrive::drive_deauth()     # Without auth\n\nfile_url &lt;- \"https://docs.google.com/spreadsheets/d/1PyDgAmOCCqOCWn-IEvhvj0RReoLyQwwa/edit?usp=drive_link&ouid=110726128853064340139&rtpof=true&sd=true\"\ngoogledrive::drive_download(as_id(file_url), path = \"tq_get.xlsx\", overwrite = TRUE) \n\nFile downloaded:\n\n\n‚Ä¢ 'tq_get.xlsx' &lt;id: 1PyDgAmOCCqOCWn-IEvhvj0RReoLyQwwa&gt;\n\n\nSaved locally as:\n\n\n‚Ä¢ 'tq_get.xlsx'\n\nfile &lt;- readxl::read_xlsx(\"tq_get.xlsx\")\nfile |&gt; gt()  \n\n\n\n\n\n\n\n\nCAT_source\nCAT_get\nID\nCAT_name\nCAT_text\nCAT_y_label\nCAT_link\n\n\n\n\nFRED\neconomic.data\nDCOILWTICO\nOil\nCrude Oil Prices: West Texas Intermediate (WTI) - Cushing, Oklahoma\nDollars per Barrel\nhttps://fred.stlouisfed.org/series/DCOILWTICO\n\n\nFRED\neconomic.data\nPCOPPUSDM\nCopper\nGlobal price of Copper\nU.S. Dollars per Metric Ton\nNA\n\n\nFRED\neconomic.data\nPALLFNFINDEXQ\nCommodities Index\nGlobal Price Index of All Commodities\nIndex 2016 = 100\nNA\n\n\nFRED\neconomic.data\nSP500\nS&P 500\nS&P 500\nIndex\nNA\n\n\nFRED\neconomic.data\nWILL5000PR\nWilshire 5000\nWilshire 5000 Price Index\nIndex\nNA\n\n\nFRED\neconomic.data\nCPIAUCSL\nConsumer Price Index US\nConsumer Price Index for All Urban Consumers: All Items in U.S. City Average\nIndex 1982-1984=100\nNA\n\n\nFRED\neconomic.data\nDNKCPIALLMINMEI\nConsumer Price Index DK\nConsumer Price Index: All Items for Denmark\nIndex 2015=100\nNA\n\n\nFRED\neconomic.data\nDEXUSEU\n$ / ‚Ç¨\nU.S. / Euro Foreign Exchange Rate\nU.S. Dollars to One Euro\nNA\n\n\nFRED\neconomic.data\nDEXCHUS\nChinese Yuan / $\nChina / U.S. Foreign Exchange Rate\nChinese Yuan to One U.S. Dollar\nNA\n\n\nFRED\neconomic.data\nPNRGINDEXM\nEnergy index\nGlobal price of Energy index\nIndex 2016 = 100\nNA\n\n\nFRED\neconomic.data\nTCU\nCapacity Utilization\nCapacity Utilization: Total Index\nPercent of Capacity\nNA\n\n\nFRED\neconomic.data\nBUSINV\nInventories\nTotal Business Inventories\nMillions of Dollars\nNA\n\n\nFRED\neconomic.data\nISRATIO\nInventories to Sales\nTotal Business: Inventories to Sales Ratio\nRatio\nNA\n\n\nFRED\neconomic.data\nCBBTCUSD\nBitcoin\nCoinbase Bitcoin\nU.S. Dollars\nhttps://fred.stlouisfed.org/series/CBBTCUSD\n\n\nFRED\neconomic.data\nFEDFUNDS\nFederal Funds interst rate\nFederal Funds Effective Rate\nPercent of Capacity\nhttps://fred.stlouisfed.org/series/FEDFUNDS\n\n\nQuandl\nquandl\nLBMA/SILVER\nSilver Price: London Fixing\nLondon Bullion Market Association, Silver Price: London Fixing\nU.S. Dollars\nNA\n\n\nQuandl\nquandl\nLBMA/GOLD\nGold Price: London Fixing\nLondon Bullion Market Association, Gold Price: London Fixing\nU.S. Dollars\nhttps://data.nasdaq.com/data/LBMA/GOLD-gold-price-london-fixing\n\n\nYahoo! Finance\nstock.prices\nGC=F\nGold\nGold Apr 24, represented by the futures contract GCJ24\nU.S. Dollars\nNA\n\n\nYahoo! Finance\nstock.prices\n2827.HK\nCSI 300 China Tracker\nW.I.S.E. - CSI 300 China Tracker, Shanghai Shenzhen index = mainland Chinese stocks\nHKD\nhttps://finance.yahoo.com/quote/2827.HK?.tsrc=fin-srch\n\n\nYahoo! Finance\nstock.prices\n^HSI\nHang Seng Index (HSI)\nHang Seng Index = Hong Kong financial world and proxy for Asian markets\nHKD\nhttps://finance.yahoo.com/quote/^HSI?.tsrc=fin-srch\n\n\nYahoo! Finance\nstock.prices\nNOVO-B.CO\nNovo-Nordisk\nNovo Nordisk A/S, DK0060534915\nDKK\nhttps://finance.yahoo.com/quote/NOVO-B.CO?p=NOVO-B.CO&.tsrc=fin-srch\n\n\nYahoo! Finance\nstock.prices\nXMAW.DE\nMSCI AC World Index UCITS ETF\nXtrackers MSCI AC World ESG Screened UCITS ETF, IE00BGHQ0G80\n‚Ç¨\nhttps://finance.yahoo.com/quote/XMAW.DE?p=XMAW.DE&.tsrc=fin-srch\n\n\nML\nML\nML\nSimulated Growth Scenarios\nSimulated Growth Scenarios (each 10 years) with 5%, 10%, 25%, 35%, 2% annual growth rates followed by linear growth with 3.000 and 15.000 per year.\nIndex\nNA\n\n\n\n\n\n\n\n\n\nDownload a public shared .rds file from Google Drive\n\nRead data from an external API: The Star Wars API\n\nlibrary(httr2)\nlibrary(tidyr)\nlibrary(gt)\n\nresp_json &lt;- \n  httr2::request(\"https://swapi.dev/api/people/\") |&gt;\n  httr2::req_perform() |&gt;\n  httr2::resp_body_json(simplifyVector = TRUE)\n\nname_people &lt;- \n  resp_json$results$name |&gt;  tidyr::as_tibble()\nname_people |&gt; gt()\n\n\n\n\n\n\n\n\nvalue\n\n\n\n\nLuke Skywalker\n\n\nC-3PO\n\n\nR2-D2\n\n\nDarth Vader\n\n\nLeia Organa\n\n\nOwen Lars\n\n\nBeru Whitesun lars\n\n\nR5-D4\n\n\nBiggs Darklighter\n\n\nObi-Wan Kenobi\n\n\n\n\n\n\n\n\n\nRead data from an external API, Weather forecast in NYC, API: The National Weather Service (NWS)\n\n# library(httr2)\n# library(purrr)\n# library(dplyr)\n# library(lubridate)\n# library(gt)\n# \n# NWS_base_url &lt;- 'https://api.weather.gov'\n# \n# forecast_url &lt;- request(NWS_base_url) |&gt; \n#   req_url_path_append(\n#     'points',\n#     '40.730610,-73.935242'\n#   ) |&gt; \n#   req_perform() |&gt; \n#   resp_body_json() |&gt; \n#   # dplyr::glimpse() |&gt; \n#   purrr::pluck('properties', 'forecastHourly')\n# \n# \n# forecast_response &lt;- request(forecast_url) |&gt; \n#   req_perform()\n# \n# extracted_data &lt;- forecast_response |&gt; \n#   resp_body_json() |&gt; \n#   pluck('properties', 'periods') |&gt; \n#   purrr::map_dfr( # iterates over each list and binds rows to a tibble\n#     \\(x) {\n#       tibble(\n#         time = x |&gt; pluck('startTime'),\n#         temp_F = x |&gt; pluck('temperature'),\n#         rain_prob = x |&gt; pluck('probabilityOfPrecipitation', 'value'),\n#         forecast = x |&gt; pluck('shortForecast')\n#       )\n#     }\n#   ) |&gt; \n#   dplyr::mutate(\n#     time = time |&gt; lubridate::ymd_hms()\n#   )\n# \n# extracted_data |&gt; gt()\n\n\nRead a googlesheet from private Google Drive\n\nlibrary(googledrive)\nlibrary(googlesheets4)\nlibrary(dplyr)\nlibrary(gt)\n\n\n# Google Authentication\ngoogledrive::drive_auth(\n  scopes = \"https://www.googleapis.com/auth/drive.readonly\")\ngs4_auth(token = drive_token())\n\n# Get Google Sheet ID\nss &lt;- googledrive::drive_get(\"hv8_planter_sheet\")\n\n# ss can be url???\n# Read data from Google Sheet\ndata &lt;- googlesheets4::read_sheet(ss, sheet = \"content\")\n\ndata |&gt; gt()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "With GitHub Actions on GitHub I can:\n\ninstall Quarto + R and the correct versions of each R package you need (yml file)\nrender a Quarto project (not render any files locally!) (yml file)\npublish a Quarto project on GitHub Pages (yml file)\nexecute R code and content in qmd files\n\nHere is my Workflow for a Quarto website using GitHub Pages and GitHub Actions.\nWorkflow - setting things up:\n\nCreate Quarto website project with git and renv in RStudio on my Mac.\nCommit with Sourcetree ??\nCreate my new repository on GitHub with usethis::use_github() in RStudio in my R project (My GitHub token used in gitcreds::gitcreds_set() controls which GitHub account is used)\nOn GitHub in my new repository: main -&gt; View all branches -&gt; Create a branch -&gt; ‚Äúgh-pages‚Äù\nIn RStudio create txt file publish.yaml file in new folders .github/workflows. Copy/paste complete example of a GitHub Action into publish.yaml\nCommit with Sourcetree\nPush to GitHub in in RStudio\nOn GitHub in my new repository:\n\nPages -&gt; Branch -&gt; change from ‚Äúmain‚Äù to ‚Äúgh-pages‚Äù and save\nTop bar -&gt; Actions, - here I can follow the ‚Äúpages build and deployment‚Äù and then I go to visit the website üôÇ\n\n(notice that I have not rendered locally at all)\n\nWorkflow:\n\nWrite R code and content in qmd files\nCall renv::snapshot() to save the state of my project libraries in renv.lock\nCommit with Sourcetree\nPush to GitHub in in RStudio\nFrom here GitHub Actions runs automatically. It\n\nruns the R code\nrenders the Quarto website\npublishes the Quarto website on GitHub Pages\n\n\nResources:\n\nQuarto: GitHub Pages, Executing Code\nggnot2 on YouTube: Publish a Quarto project using GitHub Pages+GitHub Actions in 6 minutes (no need to render locally!)\nArticle: How to Use GitHub Actions with R to Run Code Automatically"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GitHub Actions",
    "section": "",
    "text": "This is a sandbox Quarto website using GitHub Actions to:\n\nrun R code within Quarto on Github\npublish a Quarto website on GitHub Pages\n\nUse cases:\n\nrun R scrips remotely and document when the code has been executed\nproduce and publish a report automatically on a schedule\n‚Ä¶"
  }
]