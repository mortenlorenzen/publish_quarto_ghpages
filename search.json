[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "With GitHub Actions on GitHub I can:\n\ninstall Quarto + R and the correct versions of each R package you need (yml file)\nrender a Quarto project (not render any files locally!) (yml file)\npublish a Quarto project on GitHub Pages (yml file)\nexecute R code and content in qmd files\n\nHere is my Workflow for a Quarto website using GitHub Pages and GitHub Actions.\nWorkflow - setting things up:\n\nCreate Quarto website project with git and renv in RStudio on my Mac.\nCommit with Sourcetree ??\nCreate my new repository on GitHub with usethis::use_github() in RStudio in my R project (My GitHub token used in gitcreds::gitcreds_set() controls which GitHub account is used)\nOn GitHub in my new repository: main -&gt; View all branches -&gt; Create a branch -&gt; ‚Äúgh-pages‚Äù\nIn RStudio create txt file publish.yaml file in new folders .github/workflows. Copy/paste complete example of a GitHub Action into publish.yaml\nCommit with Sourcetree\nPush to GitHub in in RStudio\nOn GitHub in my new repository:\n\nPages -&gt; Branch -&gt; change from ‚Äúmain‚Äù to ‚Äúgh-pages‚Äù and save\nTop bar -&gt; Actions, - here I can follow the ‚Äúpages build and deployment‚Äù and then I go to visit the website üôÇ\n\n(notice that I have not rendered locally at all)\n\nWorkflow:\n\nWrite R code and content in qmd files\nCall renv::snapshot() to save the state of my project libraries in renv.lock\nCommit with Sourcetree\nPush to GitHub in in RStudio\nFrom here GitHub Actions runs automatically. It\n\nruns the R code\nrenders the Quarto website\npublishes the Quarto website on GitHub Pages\n\n\nResources:\n\nQuarto: GitHub Pages, Executing Code\nggnot2 on YouTube: Publish a Quarto project using GitHub Pages+GitHub Actions in 6 minutes (no need to render locally!)\nArticle: How to Use GitHub Actions with R to Run Code Automatically"
  },
  {
    "objectID": "sandbox_auth.html",
    "href": "sandbox_auth.html",
    "title": "Sandbox R code with authorization",
    "section": "",
    "text": "This Quarto website was rendered on GitHub 2024-03-11 14:12:18.063832 at UTC time.\nThe following code is focused on connecting R on GitHub to external data sources with authorization.\nI test R code to:\n\nWrite and upload a .rds file to Google Drive\nRead and download files from private Google Drive, with authentication\n\nCheck authentication and de-authentication information\n\nlibrary(googledrive)\n\n# Get info on current user and Drive capabilities\ndrive_user() \ndrive_about() \n\n# Edit and view auth configuration\ndrive_oauth_client()   # (client, path, api_key) the current user-configured OAuth client\ndrive_api_key()        # the current user-configured API key\ndrive_auth_configure() # An object of R6 class gargle::AuthState, invisibly\n\ndrive_deauth()  # Suspend authorization\ndrive_auth()    # Authorize googledrive\n\ndrive_scopes()  # Produce scopes specific to the Drive API\n\n\n\n# Workflow to use Google Drive functions without interactive prompts\ndrive_auth_configure(api_key = \"GOOGLE_API_KEY\")  \ndrive_auth(email =\"lorenzenmail@gmail.com\")\n\n# Now you can use Google Drive functions without interactive prompts\n# Example: List files in your Drive\ndrive_ls()\n\nWrite and upload a .rds file to Google Drive\n\nlibrary(googledrive)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(gt)\n\ngoogledrive::drive_deauth() \n\n\n\n# # Write and upload a .rds file to Google Drive\n# # THIS DOES NOT WORK ON GITHUB ACTIONS, but it does work Non-interactive locally (with real GOOGLE_API_KEY)\n# googledrive::drive_auth_configure(api_key = \"GOOGLE_API_KEY\") \n# googledrive::drive_auth(email =\"lorenzenmail@gmail.com\")\n# \n# file |&gt; \n#   dplyr::mutate(Remarks = paste(\"Table in rds written at \", Sys.time())) |&gt;\n#   readr::write_rds(\"test_rds_upload.rds\")\n# \n# folder_upload_url &lt;- \"https://drive.google.com/drive/folders/1ZJLxPSmOjbPiXn6OQ_JK1CPA40l8fNe4?usp=drive_link\"\n# folder_upload_id &lt;- \"1ZJLxPSmOjbPiXn6OQ_JK1CPA40l8fNe4\"\n# googledrive::drive_put(\"test_rds_upload.rds\", path = as_id(folder_upload_id)) # upload file\n\n\n\n\n# Download and read the newly written public shared .rds file from Google Drive\nfile_upload_url &lt;- \"https://drive.google.com/file/d/1voHotEwiiGGi-nc_HrMkw6Cmitw007wG/view?usp=drive_link\"\ngoogledrive::drive_download(as_id(file_upload_url), path = \"test_rds_upload.rds\", overwrite = TRUE) # download file again\n\nfile &lt;- readr::read_rds(\"test_rds_upload.rds\") # read file\nfile |&gt; gt() # print my datatable\n\n\n\n\n\n\n\n\nDate\nName\nNumber\nRemarks\n\n\n\n\n2024-01-27\nAlbert\n245\nTable in rds written at 2024-03-08 14:58:17.746863\n\n\n2024-01-28\nOle\n4767\nTable in rds written at 2024-03-08 14:58:17.746863\n\n\n2024-01-27\nToni\n245\nTable in rds written at 2024-03-08 14:58:17.746863\n\n\n2024-01-27\nPeter\n57\nTable in rds written at 2024-03-08 14:58:17.746863\n\n\n\n\n\n\n\n\n\nRead a googlesheet from private Google Drive\n\nlibrary(googledrive)\nlibrary(googlesheets4)\nlibrary(dplyr)\nlibrary(gt)\n\n\n# Google Authentication\ngoogledrive::drive_auth(\n  scopes = \"https://www.googleapis.com/auth/drive.readonly\")\ngs4_auth(token = drive_token())\n\n# Get Google Sheet ID\nss &lt;- googledrive::drive_get(\"hv8_planter_sheet\")\n\n# ss can be url???\n# Read data from Google Sheet\ndata &lt;- googlesheets4::read_sheet(ss, sheet = \"content\")\n\ndata |&gt; gt()"
  },
  {
    "objectID": "sandbox_no_auth.html",
    "href": "sandbox_no_auth.html",
    "title": "Sandbox R code with no authorization",
    "section": "",
    "text": "This Quarto website was rendered on GitHub 2024-03-11 14:12:09.233624 at UTC time.\nThe following code is focused on connecting R on GitHub to external data sources with no authorization.\nI test R code to:\n\nRead a public shared googlesheet from Google Drive ‚úÖ\nDownload and read a public shared .xlsx file from Google Drive ‚úÖ\nWrite and upload a .rds file to Google Drive\nDownload and read a public shared .rds file from Google Drive ‚úÖ\nRead data from an external API, Star Wars ‚úÖ - API IS DOWN!\nRead data from an external API, Weather forecast ‚úÖ\n\n\nRead a public shared googlesheet from Google Drive\n\nlibrary(googlesheets4)\nlibrary(gt)\n\ngooglesheets4::gs4_deauth()   # Without giving {googledrive} access to my Google account\n\nspreadsheet_url &lt;- \"https://docs.google.com/spreadsheets/d/1dnzTx2TIxk-QpoWNz08Jr_e4F2rZ4mDBgphzq9lwdYM/edit?usp=drive_link\"\ndatatable &lt;- googlesheets4::read_sheet(spreadsheet_url, range = \"Ark1!A1:D5\")\n\ndatatable |&gt; gt()                        # print my datatable\n\n\n\n\n\n\n\n\nDate\nName\nNumber\nRemarks\n\n\n\n\n2024-01-27\nAlbert\n245\nTable in Googlesheet\n\n\n2024-01-28\nOle\n4767\nTable in Googlesheet\n\n\n2024-01-27\nToni\n245\nTable in Googlesheet\n\n\n2024-01-27\nPeter\n57\nTable in Googlesheet\n\n\n\n\n\n\n\n\n\nDownload and read a public shared .xlsx file from Google Drive\n\n\nlibrary(googledrive)\nlibrary(readxl)\nlibrary(gt)\n\ngoogledrive::drive_deauth()  # Without giving {googledrive} access to my Google account\n\nfile_url &lt;- \"https://docs.google.com/spreadsheets/d/1AIAkWHGig6a0zG-iYH0Lj9PC2fLmfja5/edit?usp=drive_link&ouid=110726128853064340139&rtpof=true&sd=true\"\ngoogledrive::drive_download(as_id(file_url), path = \"test_xlsx.xlsx\", overwrite = TRUE) # download file\n\nfile &lt;- readxl::read_xlsx(\"test_xlsx.xlsx\") # read file\nfile |&gt; gt() # print my datatable\n\n\n\n\n\n\n\n\nDate\nName\nNumber\nRemarks\n\n\n\n\n2024-01-27\nAlbert\n245\nTable in Excel sheet\n\n\n2024-01-28\nOle\n4767\nTable in Excel sheet\n\n\n2024-01-27\nToni\n245\nTable in Excel sheet\n\n\n2024-01-27\nPeter\n57\nTable in Excel sheet\n\n\n\n\n\n\n\n\n\nWrite and upload a .rds file to Google Drive\n\nlibrary(googledrive)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(gt)\n\ngoogledrive::drive_deauth() \n\n# # This did not work with url id's!! ?????????\n# # Write and upload a .rds file to Google Drive\n\n# \n# file |&gt; \n#   dplyr::mutate(Remarks = paste(\"Table in rds written at \", Sys.time())) |&gt;\n#   readr::write_rds(\"test_rds_upload.rds\")\n\n# \n# folder_upload_url &lt;- \"https://drive.google.com/drive/folders/1ZJLxPSmOjbPiXn6OQ_JK1CPA40l8fNe4?usp=drive_link\"\n# folder_upload_id &lt;- \"1ZJLxPSmOjbPiXn6OQ_JK1CPA40l8fNe4\"\n# googledrive::drive_put(\"test_rds_upload.rds\", path = as_id(folder_upload_id)) # upload file\n\n# \n# file_upload_url &lt;- \"https://drive.google.com/file/d/1voHotEwiiGGi-nc_HrMkw6Cmitw007wG/view?usp=drive_link\"\n# googledrive::drive_put(\"test_rds_upload.rds\", path = as_id(file_upload_url)) # upload file\n\n\n\n# Download and read the newly written public shared .rds file from Google Drive\nfile_upload_url &lt;- \"https://drive.google.com/file/d/1voHotEwiiGGi-nc_HrMkw6Cmitw007wG/view?usp=drive_link\"\ngoogledrive::drive_download(as_id(file_upload_url), path = \"test_rds_upload.rds\", overwrite = TRUE) # download file again\n\nfile &lt;- readr::read_rds(\"test_rds_upload.rds\") # read file\nfile |&gt; gt() # print my datatable\n\n\n\n\n\n\n\n\nDate\nName\nNumber\nRemarks\n\n\n\n\n2024-01-27\nAlbert\n245\nTable in rds written at 2024-03-08 14:58:17.746863\n\n\n2024-01-28\nOle\n4767\nTable in rds written at 2024-03-08 14:58:17.746863\n\n\n2024-01-27\nToni\n245\nTable in rds written at 2024-03-08 14:58:17.746863\n\n\n2024-01-27\nPeter\n57\nTable in rds written at 2024-03-08 14:58:17.746863\n\n\n\n\n\n\n\n\n\nDownload and read a public shared .rds file from Google Drive\n\nlibrary(googledrive)\nlibrary(readr)\nlibrary(gt)\n\ngoogledrive::drive_deauth()  # Without giving {googledrive} access to my Google account\n\nfile_url &lt;- \"https://drive.google.com/file/d/1tADUi-z8sH6B8ByvZKWXVMcSNVQUP2_H/view?usp=drive_link\"\ngoogledrive::drive_download(as_id(file_url), path = \"test_rds.rds\", overwrite = TRUE) # download file\n\nfile &lt;- readr::read_rds(\"test_rds.rds\") # read file\nfile |&gt; gt() # print my datatable\n\n\n\n\n\n\n\n\nDate\nName\nNumber\nRemark\nRemarks\n\n\n\n\n2024-01-27\nAlbert\n245\nTable in Excel sheet\nTable in rds\n\n\n2024-01-28\nOle\n4767\nTable in Excel sheet\nTable in rds\n\n\n2024-01-27\nToni\n245\nTable in Excel sheet\nTable in rds\n\n\n2024-01-27\nPeter\n57\nTable in Excel sheet\nTable in rds\n\n\n\n\n\n\n\n\n\nRead data from an external API: The Star Wars API - API IS DOWN!\n\nlibrary(httr2)\nlibrary(tidyr)\nlibrary(gt)\n\nresp_json &lt;- \n  httr2::request(\"https://swapi.dev/api/people/\") |&gt;\n  httr2::req_perform() |&gt;\n  httr2::resp_body_json(simplifyVector = TRUE)\n\nname_people &lt;- \n  resp_json$results$name |&gt;  tidyr::as_tibble()\nname_people |&gt; gt()\n\n\nRead data from an external API, Weather forecast in NYC, API: The National Weather Service (NWS)\n\nlibrary(httr2)\nlibrary(purrr)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(gt)\n\nNWS_base_url &lt;- 'https://api.weather.gov'\n\nforecast_url &lt;- request(NWS_base_url) |&gt; \n  req_url_path_append(\n    'points', '40.730610,-73.935242'\n  ) |&gt; \n  req_perform() |&gt; \n  resp_body_json() |&gt; \n  # dplyr::glimpse() |&gt; \n  purrr::pluck('properties', 'forecastHourly')\n\n\nextracted_data &lt;- request(forecast_url) |&gt; \n  req_perform() |&gt;\n  resp_body_json() |&gt; \n  purrr::pluck('properties', 'periods') |&gt; \n  purrr::map_dfr(    # iterates over each list and binds rows to a tibble\n    \\(x) {tibble(\n      time = x |&gt; purrr::pluck('startTime'),\n      temp_F = x |&gt; purrr::pluck('temperature'),\n      rain_prob = x |&gt; purrr::pluck('probabilityOfPrecipitation', 'value'),\n      forecast = x |&gt; purrr::pluck('shortForecast')\n    )}\n  ) |&gt; \n  dplyr::mutate(\n    time = time |&gt; lubridate::ymd_hms()\n  )\n\nextracted_data |&gt; \n  gt::gt() |&gt; \n  gt::opt_interactive(page_size_default = 10) |&gt;\n  gt::cols_width(\n    temp_F ~ px(120),\n    rain_prob ~ px(120)\n  )"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GitHub Actions",
    "section": "",
    "text": "This is a sandbox Quarto website using GitHub Actions to:\n\nrun R code within Quarto on Github\npublish a Quarto website on GitHub Pages\n\nUse cases:\n\nrun R scrips remotely and document when the code has been executed\nproduce and publish a report automatically on a schedule\n‚Ä¶"
  }
]